---
# Python  
---
*edited: Friday, Oct 28th*
## Automating the boring stuff
### Chapter 1: Python programming basics
**Expression vs statement**: an expression is a combination of values and operators. All expressions evaluate (i.e. reduce) to a single value, statements do not.
### Chapter 2: Flow control
**Condition**: A condition is an expression used in a flow control statement that evaluates to a Boolean value.  
**Break vs continue statements**: The break statement will move the execution outside and just after a loop. The continue statement will move the execution to the start of the loop.
### Chapter 3: Functions
The data type of `None` is `NoneType`.  
Can use the `global` statement to modify a global variable from within a function. eg:
```
def spam()
  global eggs
  eggs = 'spam'

eggs = 'global'
spam()
print(eggs)
```
Output: `spam`  
Exception handling: to avoid program crash from errors/exceptions, do `try` and `except` clauses. Eg: `except ZeroDivisionError`

### Chapter 4: Lists
NB: slice of a list will include the first item, but will go up (not including) the second item. `spam[1:3]` grabs `spam[1]` and `spam[2]`.  
Multiple assignment trick: can assign a list as a value for three variables. Make sure to have the same number of variables and items in the list or you'll get a `ValueError`
```
cat = [tuxedo, tabby, Sphynx]
Twist, Daisy, Ramses = cat
```
**Method vs function**: method is same as a function, except it is "called on" a value. Difference between `cat.index(tuxedo)` vs `print(cat[0])`  
Modify lists *in place* with `myList.insert(index, itemToInsert)` and `myList.append(itemToInsert)`.  
Can also remove items with `myList.remove(itemToRemove)`  
**List-like data types**: strings and tuples. 
- String vs list: a list is a **mutable** data type and strings are basically lists of characters.
- Tuples vs lists: Tuples are types with parentheses, Also, tuples cannot have their values modified/appended/removed. Finally, using tuples is slightly faster.

**âš References**: be careful when making a copy of a list, because modifying either list will affect the other. **When you assign a list to a variable, you are actually assigning a list reference to the variable.** Essentially, when copying a list, they both point to the same sequence of values. eg:
```
cats = ["tuxedo", "tabby", "Sphynx"]

catsCopy = cats

catsCopy
Out[4]: ['tuxedo', 'tabby', 'Sphynx']

cats[1] = "orange"

catsCopy
Out[6]: ['tuxedo', 'orange', 'Sphynx']
```
To avoid modifying the original list or dictionary, you can use the module `copy` which includes functions `copy()` and `deepcopy()` (the latter is used for embedded lists).

> "The del statement is good to use when you know the index of the value
you want to remove from the list. The remove() method is good when you
know the value you want to remove from the list." (p. 91)

### Chapter 5: Dictionaries and Structuring Data

`keys(), values(), items()`: values returned are not true lists but they can be used in `for` loops. NB: values returned by `items()` method are tuples.  
Can use get() method on dictionary to retrieve value based on key. get() takes two arguments: the key you are searching for, and a default value if the key doesn't exist.  
Use `setdefault` to create a key value if the key does not exist already. If it does exist, it will return the current value. Can use it to create a character counter for example:
```
count = {}
string = "foo bar baz"
for character in message:
    count.setdefault('character', 0)
	count[character] += 1
``` 

Can pretty print a dictionary to make it easier to read using `pprint` and `pformat`

### Chapter 6: Manipulating Strings
Use raw strings to enable the use of *escape characters* (`\`, `\t`, `\n`, `"`, `'`). eg: `r"This is a raw string so I can use \"`  

**String methods**:
- methods to convert: `upper()`, `lower()`
- `is` methods to check content of string: `isupper()`, `islower()`, `isalpha()`, `isalnum()`, `isdecimal()`, `isspace()`, `istitle()`
- `join()` and `split()` (NB: `join` follows the separator eg `' '.join(listOfStrings)`, while `split` follows the string you are splitting eg `"My name is Ben".split()`)
- Can justify text to the left, right, or center: `ljust()`, `rjust()`, `center()`. Can be useful to output item lists/receipts.
- remove whitespace with `strip()`, `rstrip()` and `lstrip()`. Whitespace by default but can choose any characters to strip - order doesn't matter i.e. `myString.strip('Spam')` is equivalent to `myString.strip('ampS')`.
- Can import the module **`pyperclip`** (doesn't come by default) to copy and paste things to the clipboard: `pyperclip.copy(myString)`, `pyperclip.paste()`.

### Chapter 7: Pattern Matching with Regular Expressions
- Can pass a raw string regex pattern to a `re.compile` object. Will return a **regex pattern object**. eg:
```
phoneNumberRegex = re.compile(r'\d{3}-\d{3}-\d{4}')
```
- 